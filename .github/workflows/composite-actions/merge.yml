name: 'Merge'

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
        with:
          # TODO replace by env variable
          repository: haroldm/yuzu-build
          fetch-depth: 0
    - uses: actions/checkout@v2
      with:
        repository: yuzu-emu/yuzu
        submodules: recursive
        fetch-depth: 0
    - name: Configure git
      run: |
        git config --global user.email "yuzu@yuzu-emu.org"
        git config --global user.name "yuzubot"
        git config --global pull.rebase true
        git config --global rebase.autoStash true
        git config --global fetch.prune true
    - name: Install dependencies
      # due to how chocolatey works, only cmd.exe is supported here
      shell: cmd
      run: |
        choco install vulkan-sdk
        call refreshenv
        echo %PATH% >> %GITHUB_PATH%
    # Note: official EA builds only merge early-access-merge PRs
    - name: Merge mainline-merge and early-access-merge PRs
      uses: actions/github-script@v6
      with: 
        script: |
        const myExec = async (command) => await exec.getExecOutput('"C:\\Program Files\\Git\\bin\\bash.exe"',["-c",command],{silent: true}).then(result => result.stdout.trim()).catch(err => {console.log(err) ; return false })          const prs = await github.rest.search.issuesAndPullRequests({
            q: "type:pr+is:open+repo:yuzu-emu/yuzu+label:early-access-merge,mainline-merge",
            sort: "updated",
            order: "asc",
            per_page: 100
          }).then(res => res.data.items);
          for (const pr of prs) {
            console.log(`Merge "${pr.title}" ${pr.pull_request.html_url}`);
            let pn = pr.number;
            await myExec(`git fetch "https://github.com/yuzu-emu/yuzu.git" "pull/${pn}/head:pr-${pn}" -f --no-recurse-submodules`);
            await myExec(`git merge --squash "pr-${pn}"`)
            await myExec(`git commit -m "${pr.title}" `)
          };
          let body = await myExec(`GIT_BRANCH=$(git name-rev --name-only HEAD) && git log origin/$GIT_BRANCH..$GIT_BRANCH --pretty=format:"%s"`)
          core.exportVariable("body",body);
          core.exportVariable("time",new Date().toISOString().slice(0,16))