name: 'yuzu'
run-name: 'Build yuzu'

on:
  workflow_run:
    workflows: [patch]
    types:
      - completed

jobs:

  build-windows:
    runs-on: windows-2022
    steps:
      - name: Download patched src
        uses: actions/cache/restore@v3
        with:
          key: yuzu-src
          path: yuzu-src.zip
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Install dependencies
        # due to how chocolatey works, only cmd.exe is supported here
        shell: cmd
        run: |
          7z x yuzu-src.zip
          choco install vulkan-sdk
          call refreshenv
          echo %PATH% >> %GITHUB_PATH%

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure
        env:
          CC: cl.exe
          CXX: cl.exe
          CXXFLAGS: "/Gw /GA /Gr /Ob2"
        working-directory: yuzu
        run: |
          glslangValidator --version
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_POLICY_DEFAULT_CMP0069=NEW -DYUZU_ENABLE_LTO=ON -DYUZU_USE_BUNDLED_QT=1 -DYUZU_USE_BUNDLED_SDL2=1 -DYUZU_USE_QT_WEB_ENGINE=ON -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=ON -DYUZU_ENABLE_COMPATIBILITY_REPORTING=OFF -DYUZU_TESTS=OFF -DUSE_DISCORD_PRESENCE=ON -DENABLE_QT_TRANSLATION=ON -DDISPLAY_VERSION="early-access" -DCMAKE_BUILD_TYPE=Release -DYUZU_CRASH_DUMPS=ON ..

      - name: Build
        working-directory: yuzu
        run: msbuild "build/yuzu.sln" /m /p:Configuration=Release

      - name: Move everything needed into artifact folder
        working-directory: yuzu
        shell: pwsh
        run: .\.ci\scripts\windows\upload.ps1

      - name: Pack it into a zip
        shell: cmd
        working-directory: yuzu
        run: |
          mv artifacts yuzu
          7z a yuzu-windows.zip yuzu/

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: windows_build
          path: yuzu/yuzu-windows.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download patched src
        uses: actions/cache/restore@v3
        with:
          key: yuzu-src
          path: yuzu-src.zip
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Build
        run: |
          unzip -q yuzu-src.zip
          cd yuzu
          chmod a+x ./.ci/scripts/linux/exec.sh
          ./.ci/scripts/linux/exec.sh
          chmod a+x ./../package_appimage.sh
          ./../package_appimage.sh

      - name: Upload AppImage
        uses: actions/upload-artifact@v3
        with:
          name: linux_build
          path: yuzu/artifacts/yuzu-linux.AppImage

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release_notes
          path: yuzu/release.txt
  
  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download release notes
        uses: actions/download-artifact@v3
        with:
          name: release_notes

      - name: Populate env variables
        run: |
          echo "release_title=$(head -n 1 release.txt)" >> "$GITHUB_ENV"
          echo "$(tail -n +2 release.txt)" >release.txt

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "yuzu/artifacts/yuzu-linux.AppImage,yuzu/yuzu-windows.zip"
          name: "${{ env.release_title }}"
          bodyFile: release.txt
          tag: release
          token: ${{ secrets.GITHUB_TOKEN }}
